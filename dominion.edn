;;Yes, it's all bad.
;; How do you handle interactions + future states?
;; I would typically put actions in logic and multimethod it. Perhaps not a great fit?
[
 ;; Are we just shuffling cards around?
 {:card    :cellar
  :type    #{:action}
  :cost    [:coin 2]
  :actions [[:actions +1]
            ;Hmm, need a datalog-like syntax to capture *
            ;Coud maybe just use a map with keys :from, :to, :what-to-move
            [:from :hand [:move * :cards] :to :discard]
            [:from :deck [:move * :cards] :to :hand]]}

 ;; Note prior version (shown below) is too specific (e.g. discard).
 ;; We're just moving stuff around.
 {:card    :cellar
  :type    #{:action}
  :cost    [:coin 2]
  :actions [[:actions +1]
            [:from :hand [:discard *] :to :discard]
            [:from :deck [:draw *] :to :hand]]}



 {:card    :chapel
  :type    #{:action}
  :cost    [:coin 2]
  :actions [[:actions +1]
            [:from :hand [:move < 5 :cards] :to :trash]]}
 {:card     :moat
  :type     #{:action :reaction}
  :cost     [:coin 2]
  :actions  [:from :deck [:move 2 :cards] :to :hand]
  :reaction [[:optional?
              [:negate :attack]
              [:reveal]]]}
 {:card    :harbinger
  :type    #{:action}
  :cost    [:coin 3]
  :actions [[:draw +1]
            [:action +1]
            [:from :discard [:move 1 :cards] :to :deck]]}]
